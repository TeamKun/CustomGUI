import org.apache.tools.ant.filters.ReplaceTokens

plugins {
    id "de.undercouch.download"
    id 'org.jetbrains.kotlin.jvm'
    id 'org.jetbrains.kotlin.plugin.serialization' version '1.5.21'
}

repositories {
    mavenCentral()
    maven {
        name = "papermc-repo"
        url = "https://papermc.io/repo/repository/maven-public/"
    }
    maven {
        url = "https://s01.oss.sonatype.org/service/local/repositories/releases/content/"
    }
}

compileKotlin {
    kotlinOptions.jvmTarget = "1.8"
}

configurations {
    embed
    implementation.extendsFrom(embed)
}

dependencies {
    compileOnly "com.destroystokyo.paper:paper-api:1.16.5-R0.1-SNAPSHOT"
    embed group: "org.jetbrains.kotlin", name: "kotlin-stdlib", version: "1.5.21"
    embed group: "org.jetbrains.kotlin", name: "kotlin-stdlib-jdk8", version: "1.5.21"
    embed group: "org.jetbrains.kotlin", name: "kotlin-reflect", version: "1.5.21"
    embed group: "org.jetbrains.kotlin", name: "kotlin-reflect", version: "1.5.21"
    embed 'io.insert-koin:koin-core:3.1.2'
    embed 'io.insert-koin:koin-core-ext:3.0.2'
    embed 'org.jetbrains.kotlinx:kotlinx-serialization-json:1.2.2'
    embed "dev.kotx:flylib-reloaded:0.3.13"
}

processResources {
    filter ReplaceTokens, tokens: [
            "version": parent.project.version
    ]
}

jar {
    archiveName("${parent.project.name}-plugin-${parent.project.version}.jar")
    from configurations.embed.collect { it.isDirectory() ? it : zipTree(it) }
}

task buildPlugin {
    group("kotx_build")
    dependsOn(jar)
    doLast {
        delete fileTree(dir: "${projectDir}/../server/plugins", include: "${parent.project.name}-plugin-*.jar")
        copy {
            from jar
            into new File("${projectDir}/../server/plugins")
        }
    }
}

task shadow {
    group("kotx_build")
    dependsOn(jar)
    doLast {
        copy {
            from jar
            into new File("${projectDir}/../output")
        }
    }
}

task debug {
    group("kotx_build")
    dependsOn(jar)
    doLast {
        def serverDir = new File("${projectDir}/../server")
        def pluginsDir = new File(serverDir, "plugins")

        if (!serverDir.exists())
            serverDir.mkdirs()

        if (!pluginsDir.exists())
            pluginsDir.mkdirs()

        copy {
            from jar
            into new File("${projectDir}/../server/plugins")
        }

        javaexec {
            workingDir serverDir
            main "-jar"
            args = ["paper.jar", "nogui"]
        }
    }
}

task environment {
    group("kotx_build")
    doLast {
        def serverDir = new File("${projectDir}/../server")
        def paperJarFile = new File(serverDir, "paper.jar")

        if (!serverDir.exists())
            serverDir.mkdirs()

        download {
            src "https://papermc.io/api/v2/projects/paper/versions/1.16.5/builds/782/downloads/paper-1.16.5-782.jar"
            dest paperJarFile
        }

        javaexec {
            workingDir serverDir
            main "-jar"
            args = ["paper.jar", "nogui"]
        }

        def eulaFile = new File(serverDir, "eula.txt")
        eulaFile.write(eulaFile.readLines().join("\n").replace("eula=false", "eula=true"))

        def propertiesFile = new File(serverDir, "server.properties")
        propertiesFile.write(propertiesFile.readLines().join("\n")
                .replace("online-mode=true", "online-mode=false")
                .replace("difficulty=easy", "difficulty=peaceful")
                .replace("spawn-protection=16", "spawn-protection=0")
                .replace("gamemode=survival", "gamemode=creative")
                .replace("level-name=world", "level-name=dev_world")
                .replace("level-type=default", "level-type=flat")
                .replace("motd=A Minecraft Server", "motd=Kotx Development Server")
                .replace("max-tick-time=60000", "max-tick-time=-1")
                .replace("enable-command-block=false", "enable-command-block=true")
                .replace("view-distance=10", "view-distance=16")
        )
    }
}
compileKotlin {
    kotlinOptions {
        jvmTarget = "15"
    }
}
compileTestKotlin {
    kotlinOptions {
        jvmTarget = "15"
    }
}